AWSTemplateFormatVersion: 2010-09-09
Description: ->
  Creation of EC2 instance on VPC wwhich has a subnet and sg.
Parameters:
  VPCName:
    Description: My Test VPC
    Type: String 
    Default: VPC22
  vpcCIDR:
    Description:  VPC CIDR Value
    Type: String
    Default: 10.0.0.0/16
  allsourceCIDR:
    Description: allow traffic for any source CIDR
    Type: String
    Default: 0.0.0.0/0
  publicSubnet:
    Description: Public Subnet
    Type: String
    Default: 10.0.1.0/24
  keyName:
    Description: Keyname
    Type: AWS::EC2::KeyPair::KeyName
    Default: MyNEWKP
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.micro
    - t2.small
    - t2.medium
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

Mappings:
    AWSInstanceType2Arch:
      t1.micro:
        Arch: PV64
      t2.micro:
        Arch: HVM64
      t2.small:
        Arch: HVM64
      t2.medium:
        Arch: HVM64
      m1.small:
        Arch: PV64
      m1.medium:
        Arch: PV64
      m1.large:
        Arch: PV64
      m1.xlarge:
        Arch: PV64
      m2.xlarge:
        Arch: PV64
      m2.2xlarge:
        Arch: PV64
      m2.4xlarge:
        Arch: PV64
      m3.medium:
        Arch: HVM64
      m3.large:
        Arch: HVM64
      m3.xlarge:
        Arch: HVM64
      m3.2xlarge:
        Arch: HVM64
      c1.medium:
        Arch: PV64
      c1.xlarge:
        Arch: PV64
      c3.large:
        Arch: HVM64
      c3.xlarge:
        Arch: HVM64
      c3.2xlarge:
        Arch: HVM64
      c3.4xlarge:
        Arch: HVM64
      c3.8xlarge:
        Arch: HVM64
      c4.large:
        Arch: HVM64
      c4.xlarge:
        Arch: HVM64
      c4.2xlarge:
        Arch: HVM64
      c4.4xlarge:
        Arch: HVM64
      c4.8xlarge:
        Arch: HVM64
      g2.2xlarge:
        Arch: HVMG2
      r3.large:
        Arch: HVM64
      r3.xlarge:
        Arch: HVM64
      r3.2xlarge:
        Arch: HVM64
      r3.4xlarge:
        Arch: HVM64
      r3.8xlarge:
        Arch: HVM64
      i2.xlarge:
        Arch: HVM64
      i2.2xlarge:
        Arch: HVM64
      i2.4xlarge:
        Arch: HVM64
      i2.8xlarge:
        Arch: HVM64
      d2.xlarge:
        Arch: HVM64
      d2.2xlarge:
        Arch: HVM64
      d2.4xlarge:
        Arch: HVM64
      d2.8xlarge:
        Arch: HVM64
      hi1.4xlarge:
        Arch: HVM64
      hs1.8xlarge:
        Arch: HVM64
      cr1.8xlarge:
        Arch: HVM64
      cc2.8xlarge:
        Arch: HVM64
    AWSRegionArch2AMI:
      us-east-1:
        HVM64: ami-0ff8a91507f77f867
        HVMG2: ami-0a584ac55a7631c0c
      us-west-2:
        HVM64: ami-a0cfeed8
        HVMG2: ami-0e09505bc235aa82d
      us-west-1:
        HVM64: ami-0bdb828fd58c52235
        HVMG2: ami-066ee5fd4a9ef77f1
      eu-west-1:
        HVM64: ami-047bb4163c506cd98
        HVMG2: ami-0a7c483d527806435
      eu-west-2:
        HVM64: ami-f976839e
        HVMG2: NOT_SUPPORTED
      eu-west-3:
        HVM64: ami-0ebc281c20e89ba4b
        HVMG2: NOT_SUPPORTED
      eu-central-1:
        HVM64: ami-0233214e13e500f77
        HVMG2: ami-06223d46a6d0661c7
      ap-northeast-1:
        HVM64: ami-06cd52961ce9f0d85
        HVMG2: ami-053cdd503598e4a9d
      ap-northeast-2:
        HVM64: ami-0a10b2721688ce9d2
        HVMG2: NOT_SUPPORTED
      ap-northeast-3:
        HVM64: ami-0d98120a9fb693f07
        HVMG2: NOT_SUPPORTED
      ap-southeast-1:
        HVM64: ami-08569b978cc4dfa10
        HVMG2: ami-0be9df32ae9f92309
      ap-southeast-2:
        HVM64: ami-09b42976632b27e9b
        HVMG2: ami-0a9ce9fecc3d1daf8
      ap-south-1:
        HVM64: ami-0912f71e06545ad88
        HVMG2: ami-097b15e89dbdcfcf4
      us-east-2:
        HVM64: ami-0b59bfac6be064b78
        HVMG2: NOT_SUPPORTED
      ca-central-1:
        HVM64: ami-0b18956f
        HVMG2: NOT_SUPPORTED
      sa-east-1:
        HVM64: ami-07b14488da8ea02a0
        HVMG2: NOT_SUPPORTED
      cn-north-1:
        HVM64: ami-0a4eaf6c4454eda75
        HVMG2: NOT_SUPPORTED
      cn-northwest-1:
        HVM64: ami-6b6a7d09
        HVMG2: NOT_SUPPORTED

Resources: 
  # Create VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDR
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref VPCName
  # Create IGW & Attach IGW to VPC
  myIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myIGW
  
  myRoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-myRoutingTable

  # RT shoud have route to IGW (0.0.0.0/0)
  myRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myRoutingTable
      DestinationCidrBlock: !Ref allsourceCIDR
      GatewayId: !Ref myIGW

  # Create Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'       
      VpcId: !Ref myVPC
      CidrBlock: !Ref publicSubnet
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-PublicSubnet

  myrouteTableAssocName:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref myRoutingTable
  
  
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: !Ref SSHLocation
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SSHLocation 

  #EC2 instance
  myEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref keyName
      ImageId: !FindInMap [ AWSRegionArch2AMI, !Ref 'AWS::Region' , !FindInMap [ AWSInstanceType2Arch, !Ref InstanceType, Arch ] ]
      InstanceType: !Ref InstanceType
      Monitoring: true
      NetworkInterfaces: 
        - DeviceIndex: '0'
          AssociatePublicIpAddress: 'true'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet
          GroupSet: 
          - Ref: WebServerSecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        echo "Testing WebServer"
        touch ~/testfile
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-WebServer

  


# Create Private Subnet
# Subnet Assiciation (Default the subnet is associated to RT and that is Main Subnet)
# Security Group
# Security Group should have required port to be opened
# EC2 instance in Subnet
  # Region (This will be definied in .aws file)
  # Availability Zone (#GetAZs with required number)
  # Keypair details
  # Image (define an image)
  # ec2 type t2.micro
  # select security group
  # User Data 
  # Tags
  # Auto Assign Public IP for Public EC2 instance
  # Just Private IP fro DB
Outputs: 
  PublicSubnet:
    Description: Information about the value
    Value: !Ref PublicSubnet
  VPCName:
    Description: Information about the VPC value
    Value: !Ref myVPC 
  Ec2PublicIP:
    Description: The Webserver PublicIP
    Value: !GetAtt  myEC2Instance.PublicIp
  EC2PublicDNS:
    Description: The Public DNS
    Value: !GetAtt  myEC2Instance.PublicDnsName

